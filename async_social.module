<?php
/**
 * @file
 * Adds a settings page and form
 */

/**
 * Implements hook_menu().
 */
function async_social_menu() {

	$items['admin/config/services/async_social'] = array(
		'title' 						=> 'Async Social',
		'description' 			=> 'Select social networks and node types to attach social buttons with counters',
		'page callback' 		=> 'drupal_get_form',
		'page arguments'   	=> array('async_social_settings_form'),
		'access arguments'	=> array('administer site configuration'),
		'file'							=> 'async_social.admin.inc'
	);
	$items['admin/config/services/async_social/settings'] = array(
		'title' 						=> t('Settings'),
		'description' 			=> 'Select social networks and node types to attach social buttons with counters',
    'type' 							=> MENU_DEFAULT_LOCAL_TASK,
    'weight' 						=> 10,
	);
	$items['admin/config/services/async_social/facebook'] = array(
		'title' 						=> t('Facebook'),
		'description' 			=> 'Select social networks and node types to attach social buttons with counters',
		'page callback' 		=> 'drupal_get_form',
		'page arguments'   	=> array('async_social_facebook_form'),
		'access arguments'	=> array('administer site configuration'),
    'type' 							=> MENU_LOCAL_TASK,
    'weight' 						=> 20,
    'file'							=> 'async_social.admin.inc'
	);
	$items['admin/config/services/async_social/twitter'] = array(
		'title' 						=> t('Twitter'),
		'description' 			=> 'Select social networks and node types to attach social buttons with counters',
		'page callback' 		=> 'drupal_get_form',
		'page arguments'   	=> array('async_social_twitter_form'),
		'access arguments'	=> array('administer site configuration'),
    'type' 							=> MENU_LOCAL_TASK,
    'weight' 						=> 30,
		'file'							=> 'async_social.admin.inc'
	);
	$items['admin/config/services/async_social/google'] = array(
		'title' 						=> t('Google'),
		'description' 			=> 'Select social networks and node types to attach social buttons with counters',
		'page callback' 		=> 'drupal_get_form',
		'page arguments'   	=> array('async_social_google_form'),
		'access arguments'	=> array('administer site configuration'),
    'type' 							=> MENU_LOCAL_TASK,
    'weight' 						=> 40,
		'file'							=> 'async_social.admin.inc'
	);
	
	return $items;
}

/**
 * Implements hook_node_view().
 */
function async_social_node_view($node, $view_mode) {

	// first look for matching node types and view modes
	$node_types = variable_get('async_social_nodetypes', array());
	$view_modes = variable_get('async_social_viewmodes', array());

	if (in_array($node->type, $node_types, TRUE) && in_array($view_mode, $view_modes, TRUE)) {
		// and create the new region
		$node->content['async_social'] = array(
			'#prefix' => '<div id="async-social-buttons">',
			'#suffix' => '</div>'
		);

		// then look for chosen button types and prepare buttons
		$button_types = variable_get('async_social_buttons', array());
		$buttons = _async_social_buttons($node);

		foreach ($button_types as $key => $value) {
			// and finally add them
			if($key === $value) {
				$node->content['async_social'][$key] = array(
					'#markup' => $buttons[$key],
					'#prefix' => '<div class="' . $key . ' async-social-button">',
					'#suffix' => '</div>'
				);
			}
		}
	}
	// $default_theme = variable_get('theme_default', NULL);
	// $regions = system_region_list($default_theme, REGIONS_ALL);
}

/**
 * Implements hook_page_build().
 */
function async_social_page_build(&$page) {

	$google_lang 		= variable_get('async_social_google_language', 'en-US');
	$google_script 	= "window.___gcfg = {
		lang: '" . $google_lang . "'};
		(function() {
			var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
			po.src = 'https://apis.google.com/js/plusone.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
		})();";
  drupal_add_js($google_script, array(
    'type'	=> 'inline',
    'scope'	=> 'footer'
  ));

  $twitter_script = 'window.twttr=(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],t=window.twttr||{};if(d.getElementById(id))return t;js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);t._e=[];t.ready=function(f){t._e.push(f);};return t;}(document,"script","twitter-wjs"));';
  drupal_add_js($twitter_script, array(
    'type'	=> 'inline',
    'scope' => 'footer'
  ));

  $facebook_lang 		= variable_get('async_social_facebook_language', 'en_US');
  $facebook_appid 	= variable_get('async_social_facebook_appid', '');
  $facebook_appid 	= !empty($facebook_appid) ? '&appId=' . $facebook_appid : '';
  $facebook_script 	= '(function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.async = true; js.src = "//connect.facebook.net/' . $facebook_lang . '/sdk.js#xfbml=1&version=v2.3' . $facebook_appid . '";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, \'script\', \'facebook-jssdk\'));';
	drupal_add_js($facebook_script, array(
    'type' 	=> 'inline',
    'scope' => 'footer'
  ));

  drupal_add_css(drupal_get_path('module', 'async_social') . '/css/async_social.css');
}

/**
 * Helper function to create buttons markup
 * @param  object $node the node object
 * @return array $buttons array to build markup on node view
 */
function _async_social_buttons($node) {

	$url = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => true));

	$faceboook_share 	= variable_get('async_social_facebook_share', '');
	$faceboook_share  = ($faceboook_share == TRUE) ? 'true' : 'false';
	$twitter_lang 		= variable_get('async_social_twitter_language', 'en');
	$twitter_lang 		= ($twitter_lang != 'en') ? ' data-lang="' . $twitter_lang . '"' : '';
	$twitter_via 			= variable_get('async_social_twitter_via', '');
	$twitter_via 			= !empty($twitter_via) ? ' data-via="' . $twitter_via . '"' : '';
	$twitter_related 	= variable_get('async_social_twitter_related', '');
	$twitter_related  = !empty($twitter_related) ? ' data-related="' . $twitter_related . '"' : '';

	$buttons = array(
		'like'		=> '<div class="fb-like" data-href="' . $url . '" data-layout="button_count" data-action="like" data-show-faces="false" data-share="' . $faceboook_share . '"></div>',
		'tweet' 	=> '<a class="twitter-share-button" href="https://twitter.com/share"' . $twitter_lang . ' data-url="' . $url . '" data-text="' . $node->title . '"' . $twitter_via . $twitter_related . '></a>',
		'plusone'	=> '<g:plusone callback="plusone_vote" size="medium" href="' . $url . '"></g:plusone>'
	);

	return $buttons;
}

/**
 * Helper function to build select list options for view modes
 * @return array $view_modes array of all available view modes
 */
function _async_social_view_modes() {

	$entity_info = entity_get_info('node');
	$view_modes = array();
	
	foreach ($entity_info['view modes'] as $machine_name => $property) {
		// skip rss, search_index, search_result and token
    if (in_array($machine_name, array('rss', 'search_index', 'search_result', 'token'))) { continue; }

		$view_modes[$machine_name] = $property['label'];
	}

	return $view_modes;
}